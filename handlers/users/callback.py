from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart

from handlers.users import lt
from handlers.users import misc as ms
from keyboards import ik, kb
from loader import dp
from states import st
from utils.db_api import database as db


@dp.callback_query_handler(state="*")
async def main(call: types.CallbackQuery, state: FSMContext):
    params = call.data.split("-")
    match params[0]:
        case "back_to_menu":
            await call.message.delete()
            await call.message.answer("üìì–ú–µ–Ω—é:",reply_markup=kb.menu)

        case "back_to_change_to_profile":
            await state.finish()
            await call.message.delete()
            await call.message.answer_photo(photo=db.get_user_ankets(call.from_user.id)['photo'],
                                            caption=lt.profile_user(call.from_user.id),reply_markup=ik.keyboard_user)

        #Change_profile_user
        case "change_name":
            await call.message.delete()
            await call.message.answer("üí†–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ —É –≤–∞—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ:")
            await st.UserState.change_name.set()

        case "change_photo":
            await call.message.delete()
            await call.message.answer("üì∏–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ —É –≤–∞—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ:")
            await st.UserState.change_photo.set()

        case "change_about_me":
            await call.message.delete()
            await call.message.answer("üí°–ù–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ:")
            await st.UserState.change_about_me.set()

        case "change_floor":
            await call.message.delete()
            await call.message.answer("üìç–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",reply_markup=ik.change_floor)

        case "change_man":
            await call.message.delete()
            db.update_ankets(call.from_user.id,'floor',"–ü–∞—Ä–µ–Ω—å")
            await call.message.answer("üéó–í–∞—à –ø–æ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!",reply_markup=kb.menu)

        case "chanhe_woman":
            await call.message.delete()
            db.update_ankets(call.from_user.id,'floor',"–î–µ–≤—É—à–∫–∞")
            await call.message.answer("üéó–í–∞—à –ø–æ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=kb.menu)

        case "change_who":
            await call.message.delete()
            await call.message.answer("üìç–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å:",reply_markup=ik.change_who)

        case "change_who_man":
            await call.message.delete()
            db.update_ankets(call.from_user.id,'who',"–ü–∞—Ä–Ω–µ–π")
            await call.message.answer("üéó–í–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã!",reply_markup=kb.menu)

        case "change_who_woman":
            await call.message.delete()
            db.update_ankets(call.from_user.id, 'who', "–î–µ–≤—É—à–µ–∫")
            await call.message.answer("üéó–í–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã!",reply_markup=kb.menu)

        case "change_who_any":
            await call.message.delete()
            db.update_ankets(call.from_user.id,'who',"–õ—é–±–æ–π")
            await call.message.answer("üéó–í–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã!", reply_markup=kb.menu)



